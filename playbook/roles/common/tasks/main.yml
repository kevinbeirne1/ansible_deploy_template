- name: Deadsnakes PPA to get Python 3.6
  apt_repository:
    repo: "ppa:deadsnakes/ppa"

- name: make sure required packages are installed
  apt:
    pkg:
    - nginx
    - git
    - "{{ PYTHON_VERSION }}"
    - "{{ PYTHON_VERSION }}-venv"

- name: allow long hostnames in nginx
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '(\s+)#? ? server_names_hash_bucket_size'
    backrefs: yes
    line: '\1server_names_hash_bucket_size 64;'

- name: add nginx config to sites-available
  template:
    src: ./nginx.conf.j2
    dest: /etc/nginx/sites-available/{{ HOST }}
  notify:
      - restart nginx

- name: add symlink in nginx sites-enabled
  file:
    src: /etc/nginx/sites-available/{{ HOST }}
    dest: /etc/nginx/sites-enabled/{{ HOST }}
    state: link
  notify:
    - restart nginx

- name: write gunicorn service script
  template:
    src: ./gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn-{{ HOST }}.service
  notify:
    - restart gunicorn


# Get the latest commit from Github
- name: clone latest version from from git
  ansible.builtin.git:
    repo: "{{ REPO_URL }}"
    dest: "{{ ROOT_FOLDER }}"
    single_branch: yes
    version: "{{ REPO_BRANCH }}"
    force: yes

# Maintain Virtual Environment
- name: check if virtual environment exists
  stat:
    path: "{{ PYTHON_EXECUTABLE }}"
  register: venv_status

- name: create a virtual environment in the root folder
  command: "{{ PYTHON_VERSION }} -m venv '{{ ROOT_FOLDER }}/virtualenv'"
  when: not venv_status.stat.exists

- name: pip self-update
  pip:
    name: pip
    virtualenv: "{{ ROOT_FOLDER }}/virtualenv"
    state: latest

- name: Install gunicorn and django-environ
  pip:
    name:
      - gunicorn
      - django-environ
    virtualenv: "{{ ROOT_FOLDER }}/virtualenv"

- name: Install the python packages for the project
  pip:
   virtualenv: "{{ ROOT_FOLDER }}/virtualenv"
   requirements: "{{ ROOT_FOLDER }}/requirements.txt"

# Ensure .env file present & has secure settings
- name: Check that .env exists
  stat:
    path: "{{ DOT_ENV_FILE }}"
  register: dotenv_status
  tags: dotenv

- name: Create .env file
  command: "touch {{ DOT_ENV_FILE }}"
  when: not dotenv_status.stat.exists
  tags: dotenv

- name: Check SECRET_KEY is in dotenv
  command: 'grep -Eqx "SECRET_KEY=\S{50}$" {{ DOT_ENV_FILE }}'
  # E - Regex, q - quiet/no print to console, x - matches all of line
  register: secret_key_status
  ignore_errors: yes
  tags: dotenv

- name: run get_secret_key as script
  ansible.builtin.script: "get_secret_key.py {{ ROOT_FOLDER }}"
  args:
    executable: "{{ PYTHON_EXECUTABLE }}"
  register: secret_key
  when: secret_key_status.rc == 1
  no_log: True
  tags: dotenv

- name: Set SECRET_KEY
  lineinfile:
      path: '{{ DOT_ENV_FILE }}'
      regexp: "^SECRET_KEY="
      line: "{{ secret_key['stdout_lines'][1] }}"
  when: secret_key_status.rc == 1
  no_log: True
  tags: dotenv

- name: Verify DEBUG set to FALSE
  lineinfile:
      path: '{{ DOT_ENV_FILE }}'
      line: 'DEBUG=FALSE'

- name: Verify SITENAME is set
  lineinfile:
      path: '{{ DOT_ENV_FILE }}'
      line: 'SITENAME={{ HOST }}'

# Collect static files
- name: Update static files
  command:
    argv:
      - "{{ PYTHON_EXECUTABLE }}"
      - "{{ ROOT_FOLDER }}/manage.py"
      - collectstatic
      - --noinput

# Migrate database
- name: Update the database
  command:
    argv:
      - "{{ PYTHON_EXECUTABLE }}"
      - "{{ ROOT_FOLDER }}/manage.py"
      - migrate
      - --noinput
  notify:
      - restart nginx
      - restart gunicorn
  tags:
    - 'migrate'
